
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "upi-limits-management",
   "metadata": {},
   "outputs": [],
   "source": [
    "# upi_limits_management.ipynb\n",
    "import redis\n",
    "import json\n",
    "from datetime import timedelta\n",
    "\n",
    "# Redis Enterprise Connection\n",
    "r = redis.Redis(\n",
    "    host='localhost', port=6379,\n",
    "    decode_responses=True\n",
    ")\n",
    "\n",
    "# Configurable UPI Limits\n",
    "UPI_LIMITS = {\n",
    "    'balance_checks': 50,\n",
    "    'bank_list_views': 25,\n",
    "    'status_checks': 3\n",
    "}\n",
    "\n",
    "TTL_24H = 86400\n",
    "TTL_TXN_STATUS = 900\n",
    "\n",
    "# Helper: Check & Increment Limit\n",
    "def increment_limit(key, max_limit, ttl=TTL_24H):\n",
    "    current = r.get(key)\n",
    "    if current is None:\n",
    "        r.set(key, 1, ex=ttl)\n",
    "        return True, 1\n",
    "    elif int(current) < max_limit:\n",
    "        r.incr(key)\n",
    "        return True, int(current) + 1\n",
    "    else:\n",
    "        return False, int(current)\n",
    "\n",
    "# 1. Balance Check\n",
    "def balance_check(user_id):\n",
    "    key = f"user:{user_id}:balance_checks"\n",
    "    allowed, count = increment_limit(key, UPI_LIMITS['balance_checks'])\n",
    "    return allowed, f"Balance checks used: {count}/50"\n",
    "\n",
    "# 2. Linked Bank Account Views\n",
    "def view_linked_banks(user_id):\n",
    "    key = f"user:{user_id}:bank_list_views"\n",
    "    allowed, count = increment_limit(key, UPI_LIMITS['bank_list_views'])\n",
    "    return allowed, f"Bank views used: {count}/25"\n",
    "\n",
    "# 3. Transaction Status Check\n",
    "def check_txn_status(user_id, txn_id):\n",
    "    key = f"user:{user_id}:txn:{txn_id}:status_checks"\n",
    "    field = 'count'\n",
    "    timestamp_field = 'last_check_ts'\n",
    "    pipeline = r.pipeline()\n",
    "    pipeline.hget(key, field)\n",
    "    pipeline.hget(key, timestamp_field)\n",
    "    count, last_ts = pipeline.execute()\n",
    "    if count is None:\n",
    "        pipeline.hset(key, mapping={'count': 1, 'last_check_ts': r.time()[0]})\n",
    "        pipeline.expire(key, TTL_TXN_STATUS)\n",
    "        pipeline.execute()\n",
    "        return True, "First check allowed"\n",
    "    elif int(count) < UPI_LIMITS['status_checks']:\n",
    "        now = r.time()[0]\n",
    "        if last_ts is None or (now - int(last_ts)) >= 90:\n",
    "            pipeline.hincrby(key, field, 1)\n",
    "            pipeline.hset(key, timestamp_field, now)\n",
    "            pipeline.execute()\n",
    "            return True, f"Check allowed. Count: {int(count)+1}/3"\n",
    "        else:\n",
    "            return False, f"Wait before retrying. {90 - (now - int(last_ts))}s left"\n",
    "    else:\n",
    "        return False, f"Limit exceeded. Used: {count}/3"\n",
    "\n",
    "# 4. Payee Audit Logs with RedisJSON\n",
    "def log_payee_check(user_id, txn_id, payee_name, status='confirmed'):\n",
    "    key = f"user:{user_id}:payee_checks:{txn_id}"\n",
    "    payload = {\n",
    "        'payee': payee_name,\n",
    "        'status': status,\n",
    "        'ts': r.time()[0]\n",
    "    }\n",
    "    r.execute_command('JSON.SET', key, '.', json.dumps(payload))\n",
    "    r.expire(key, TTL_TXN_STATUS)\n",
    "    return f"Logged payee check for txn {txn_id}"\n",
    "\n",
    "def delete_payee_log(user_id, txn_id):\n",
    "    key = f"user:{user_id}:payee_checks:{txn_id}"\n",
    "    r.delete(key)\n",
    "    return f"Deleted log for txn {txn_id}"\n",
    "\n",
    "# 5. Simulate Usage\n",
    "def simulate_user_flow():\n",
    "    user_id = 'user123'\n",
    "    txn_id = 'txnABC001'\n",
    "    print(balance_check(user_id))\n",
    "    print(view_linked_banks(user_id))\n",
    "    for _ in range(4):\n",
    "        print(check_txn_status(user_id, txn_id))\n",
    "    print(log_payee_check(user_id, txn_id, 'Rahul Sharma'))\n",
    "    print(delete_payee_log(user_id, txn_id))\n",
    "\n",
    "simulate_user_flow()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "name": "python",
   "version": ""
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
